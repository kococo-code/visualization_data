{"version":3,"sources":["LineChart/LineChartComponent.jsx","LineChart/reChart.jsx","page/LineChart.js","BirthRate/BirthRate.js","App.js","serviceWorker.js","index.js"],"names":["LineCharts","data","this","props","margin","width","height","svg","d3","attr","append","x","domain","length","range","call","y","d","datum","drawChart","Component","ReChart","top","right","left","bottom","datakey","tick","fontSize","padding","type","strokeDasharray","dataKey","LineChart","style","position","className","BirthRateComponenet","state","Birthrate","updateState","bind","jsonData","BirthRate","console","log","KoreaData","Korea_Rep","AfghanistanData","Afghanistan","i","push","year","value","backgroundColor","border","stroke","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a6f860f.chunk.js","sourcesContent":["import React , {Component} from 'react';\nimport * as d3 from 'd3';\n\nexport default class LineCharts extends Component{\n    drawChart(){\n        let data = this.props.data\n      \n        let margin = {top: 10, right: 30, bottom: 30, left: 60}\n        let width = 800 - margin.left - margin.right\n        let height = 300 - margin.top - margin.bottom\n        let color = \"#ff00ba\"\n        \n        let svg = d3.select('svg')\n        .attr('width',width + margin.left + margin.right)\n        .attr('height',height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform',\n            \"translate(\" + margin.left +\",\" + margin.top +\")\");\n        let x = d3.scaleLinear()\n        .domain([0,data[data.length-1].x+5])\n        .range([0,width]);\n        svg.append('g')\n        .attr('transform',\"translate(0,\"+ height + \")\")\n        .call(d3.axisBottom(x))\n\n        let y = d3.scaleLinear()\n        .domain([0,d3.max(data,function(d){return +d.y})])\n        .range([height,0]);\n        svg.append(\"g\")\n        .call(d3.axisLeft(y))\n\n        svg.append(\"path\")\n        .datum(data)\n        .attr(\"stroke\",color)\n        .attr('fill','none')\n        .attr('d',d3.line()\n        .x(function(d) {return x(d.x)})\n        .y(function(d) {return y(d.y)}))\n    \n    }\n    componentDidMount(){\n        this.drawChart()\n    }\n    render(){\n        return(\n            <svg></svg>\n        )\n    }\n}\n\n","import React , {Component} from 'react';\nimport { LineChart, CartesianGrid, Line, Legend, XAxis, YAxis, Tooltip, ResponsiveContainer} from 'recharts'\n\n\nexport default class ReChart extends Component{\n    constructor(props){\n        super(props)\n    }\n\n    render(){\n        let dataset = this.props.data\n     \n        return(\n            <div>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={this.props.data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                        <XAxis datakey=\"x\" tick={{fontSize : '11px', padding : '12px'}}/>\n                        <YAxis type=\"number\" tick={{fontSize:'11px',padding:'12px'}}/>\n                        <CartesianGrid strokeDasharray=\"3 3\"></CartesianGrid>\n                        <Tooltip></Tooltip>\n                        <Legend></Legend>\n                        <Line type=\"monotone\" dataKey=\"y\"></Line>\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LineCharts from '../LineChart/LineChartComponent';\nimport ReChart from '../LineChart/reChart';\nimport HookChart from '../LineChart/Hook';\nexport default function LineChart(){\n    let wording ={\n        position : 'absolute',\n        left : 300,\n        top : 50,\n        fontSize : 30\n      }\n      let data = [\n        {\n          x : 0,\n          y : 1.22\n        },\n        {\n          x: 1,\n          y: 1.55\n        },\n        {\n          x : 2,\n          y: 2.43\n        },\n        {\n          x: 3,\n          y: 1.2\n        },\n        {\n          x:4,\n          y:5.5\n        }\n      ]\n      let epoch = [1,2,3,4]\n      let loss = [1.22,1.55,2.43,0.12]\n\n      return(\n          <div>\n               <span style={wording}>Line Graph</span>\n                <div className=\"LineChartComponent\" >\n                    <LineCharts data={data}></LineCharts>\n                </div>\n                <div className=\"LineChart_reChart\">\n                <ReChart data={data}></ReChart>\n                </div> \n          </div>\n      )\n}","import React , {Component} from 'react';\nimport BirthRate from '../dataset/BirthRate.json';\nimport { LineChart, CartesianGrid, Line, Legend, XAxis, YAxis, Tooltip, ResponsiveContainer} from 'recharts'\n\nexport default class BirthRateComponenet extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            Birthrate : {}\n        }\n        this.updateState.bind(this);\n    }\n    updateState(){\n\n    }\n    componentDidMount(){\n        this.updateState();\n    }\n\n    render(){\n        let style={\n            position : 'relative',\n            top : 50,\n            left : 50,\n            width : 500,\n            backgroundColor : 'white',\n            border : \"1px solid black\"\n        }\n        let data = []\n        let jsonData = BirthRate.BirthRate\n        console.log(jsonData)\n        let KoreaData = BirthRate.BirthRate.Korea_Rep;\n        let AfghanistanData = BirthRate.BirthRate.Afghanistan;\n        for(var i =0 ; i<KoreaData.length;i++){\n            data.push({\n                'year': KoreaData[i].year,\n                'Korea' : KoreaData[i].value,\n                'Afghanistan' : AfghanistanData[i].value\n            })\n        }\n        \n        console.log(data)\n        return(\n            <div className=\"BirthRate\" style={style}>\n                 <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                        <XAxis dataKey=\"year\" tick={{fontSize : '10px', padding : '12px'}}/>\n                        <YAxis type=\"number\" tick={{fontSize:'11px',padding:'12px'}}/>\n                        <CartesianGrid strokeDasharray=\"3 3\"></CartesianGrid>\n                        <Tooltip></Tooltip>\n                        <Legend></Legend>\n                        <Line type=\"monotone\" dataKey=\"Korea\"></Line>\n                        <Line type=\"monotone\" dataKey=\"Afghanistan\" stroke=\"#101010\"></Line>\n\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './css/App.css';\nimport './css/LineChart.css';\nimport {Route} from 'react-router-dom';\nimport LineChart from './page/LineChart';\nimport BirthRateComponenet from './BirthRate/BirthRate';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route exact path='/' component={LineChart}></Route>\n      <Route path='/BirthRate' component={BirthRateComponenet}></Route>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App/>\n  </BrowserRouter>\n,\ndocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}